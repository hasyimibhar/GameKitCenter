//
//  GameKitCenter.h
//  GameKitCenter
//
//  Created by Hasyimi Bahrudin on 8/14/12.
//
//

#import <Foundation/Foundation.h>
#import <GameKit/GameKit.h>

#define INVOKE_ON_MAIN_THREAD_BEGIN();  dispatch_async(dispatch_get_main_queue(), ^{
#define INVOKE_ON_MAIN_THREAD_END();    });






@protocol GameKitLeaderboard;
@protocol GameKitAchievement;
@protocol GameKitScore;

/******************************************
 * GameKitCenterDelegate protocol
 *
 *      Any class that wants to listen
 *      to events generated by
 *      GameKitCenter must implement this.
 ******************************************/

@protocol GameKitCenterDelegate<NSObject>
@optional
- (void)localPlayerAuthenticated;
- (void)achievementProgressed:(id<GameKitAchievement>)achievement;
- (void)achievementsLoaded;
- (void)achievementsReset;
- (void)achievementCompleted:(id<GameKitAchievement>)achievement;
- (void)scoresLoaded;
- (void)scoreReported:(id<GameKitScore>)score;
@end

/******************************************
 * GameKitCenter class
 *
 *      The class that does it all.
 ******************************************/

@interface GameKitCenter : NSObject<UIAlertViewDelegate, GKAchievementViewControllerDelegate, GKLeaderboardViewControllerDelegate, GKGameCenterControllerDelegate>
{
    GKLocalPlayer *localPlayer;
    
    NSMutableArray *achievementsList;
    NSMutableDictionary *achievementsDictionary;
    NSMutableDictionary *gkAchievementsDictionary;
    NSMutableDictionary *queuedAchievements;
    NSMutableArray *failedAchievements;
    
    NSMutableDictionary *leaderboardDictionary;
    NSMutableArray *gkScores;
    
    BOOL isGCEnabled;
    BOOL isGCSupported;
    
    BOOL shouldCommunicateWithGC;
    BOOL isSynced;
    BOOL hasChangedDevice;
    
    NSMutableArray *delegates;
    
    UIViewController *viewController;
}

/** Initializes GameKitCenter with a dictionary.
 
 */
- (id)initWithAchievements:(NSArray *)achievementArray andLeaderboards:(NSArray *)leaderboardArray andViewController:(UIViewController *)aViewController;

/** Creates an autoreleased achievement object with a dictionary.
 Override this method to use your own custom achievement class.
 */
- (id<GameKitAchievement>)achievementWithDictionary:(NSDictionary *)dictionary;

/** Creates an autoreleased leaderboard object with a dictionary.
 Override this method to use your own custom leaderboard class.
 */
- (id<GameKitLeaderboard>)leaderboardWithDictionary:(NSDictionary *)dictionary;

/** Unregisters GameKitCenter form NSNotificationCenter.
 @warning You MUST call this before deallocating GameKitCenter, or memory will be leaked.
 */
- (void)destroy;

/** Registers a class as a delegate.
 */
- (void)addDelegate:(id<GameKitCenterDelegate>)delegate;

/** Unregisters a class as a delegate.
 */
- (void)removeDelegate:(id<GameKitCenterDelegate>)delegate;

/** Authenticate the local player.
 This will display the login form if no local player is authenticated.
 @warning Only call this method ONCE, preferrably during initialization.
 */
- (void)authenticateLocalPlayer;

/** Returns the encoded achievements progress.
 */
- (NSDictionary *)save;

/** Loads achievements progress from a dictionary.
 */
- (void)loadFromDictionary:(NSDictionary *)dictionary;

/** Reports an achievement progress.
 If the percentageCompleted is 100.0, the achievementCompleted: delegate method will be called.
 @warning This method DOES NOT report the progress to Game Center nor does it save the progress locally.
 @warning The actual reporting and saving is done when reportQueuedAchievements is called.
 */
- (void)reportAchievementWithIdentifier:(NSString *)identifier percentageCompleted:(double)percentageCompleted;

/** Reports queued achievements.
 This method does the actual reporting to Game Center.
 */
- (void)reportQueuedAchievements;

/** Flushes queued achievements.
 Discards unreported achievements waiting on the queue.
 */
- (void)flushQueuedAchievements;

/** Returns all local achievements.
 */
- (NSArray *)achievements;

/** Resets achievements progress in Game Center and locally.
 */
- (void)resetAchievements;

/** Reports a score, locally and also to the GC.
 */
- (void)reportScore:(double)aScore leaderboardID:(NSString *)aLeaderboardID;

/** Returns scores associated with the specified leaderboard.
 */
- (NSArray *)scoresWithLeaderboardID:(NSString *)aLeaderboardID playerIDs:(NSArray *)playerIDs timeScope:(GKLeaderboardTimeScope)timeScope range:(NSRange)range;

/** Returns scores associated with the specified leaderboard.
 */
- (NSArray *)scoresWithLeaderboardID:(NSString *)aLeaderboardID playerScope:(GKLeaderboardPlayerScope)playerScope timeScope:(GKLeaderboardTimeScope)timeScope range:(NSRange)range;

/** Shows the standard achievements view.
 */
- (void)showAchievements;

/** Shows the standard leaderboard view.
 */
- (void)showLeaderboard:(NSString *)aLeaderboardID;

@property (readwrite, nonatomic) BOOL shouldCommunicateWithGC;

@end






/******************************************
 * GameKitAchievement protocol
 *
 *      Any custom achievement class
 *      must adhere to this protocol
 ******************************************/

@protocol GameKitAchievement<NSObject>

- (id)initWithDictionary:(NSDictionary *)dictionary;

- (NSDictionary *)save;
- (void)loadFromDictionary:(NSDictionary *)dictionary;

- (void)progressReported;
- (void)progressFlushed;

@property (readonly, copy, nonatomic) NSString * identifier;
@property (readonly, copy, nonatomic) NSString * title;
@property (readwrite, nonatomic) double percentageCompleted;
@property (readonly, nonatomic) int points;

@optional
@property (readonly, copy, nonatomic) NSString * preEarnedDescription;
@property (readonly, copy, nonatomic) NSString * earnedDescription;
@end





/******************************************
 * StandardGameKitAchievement class
 *
 *      Default achievement class.
 *      Just use this if you don't need
 *      anything new.
 ******************************************/

@interface StandardGameKitAchievement : NSObject<GameKitAchievement>
{
    NSString    *identifier;
    NSString    *title;
    NSString    *iconFileName;
    double      percentageCompleted;
    int         points;
}

+ (id)achievementWithDictionary:(NSDictionary *)dictionary;

@property (readonly, copy, nonatomic) NSString * iconFileName;
@end






/******************************************
 * GameKitLeaderboard protocol
 *
 *      Any custom leaderboard class
 *      must adhere to this protocol
 ******************************************/

@protocol GameKitLeaderboard <NSObject>

- (id)initWithDictionary:(NSDictionary *)aDictionary;

- (id<GameKitScore>)addScoreWithPlayerID:(NSString *)aPlayerID andValue:(double)aValue andDate:(NSDate *)aDate;
- (void)removeAllScores;

- (NSArray *)scoresWithPlayerIDs:(NSArray *)playerIDs timeScope:(GKLeaderboardTimeScope)timeScope range:(NSRange)range;
- (NSArray *)scoresWithPlayerScope:(GKLeaderboardPlayerScope)playerScope timeScope:(GKLeaderboardTimeScope)timeScope range:(NSRange)range;

- (NSDictionary *)save;
- (void)loadFromDictionary:(NSDictionary *)dictionary;

@property (readonly, copy, nonatomic) NSString * name;
@property (readonly, copy, nonatomic) NSString * scoreFormatSuffixSingular;
@property (readonly, copy, nonatomic) NSString * scoreFormatSuffixPlural;
@property (readonly, copy, nonatomic) NSString * identifier;
@property (readonly, nonatomic) NSRange scoreRange;

@end






/******************************************
 * StandardGameKitLeaderboard class
 *
 *      Default leaderboard class.
 *      Just use this if you don't need
 *      anything new.
 ******************************************/

@interface StandardGameKitLeaderboard : NSObject<GameKitLeaderboard>
{
    NSString *identifier;
    NSString *name;
    NSString *scoreFormatSuffixSingular;
    NSString *scoreFormatSuffixPlural;
    NSRange scoreRange;
    
    NSMutableArray *scores;
}

+ (id)leaderboardWithDictionary:(NSDictionary *)aDictionary;

@end






/******************************************
 * GameKitScore protocol
 *
 *      Any custom score class
 *      must adhere to this protocol
 ******************************************/

@protocol GameKitScore <NSObject, NSCoding>

- (id)initWithPlayerID:(NSString *)aPlayerID leaderboardID:(NSString *)aLeaderboardID date:(NSDate *)aDate value:(double)aValue formattedValue:(NSString *)aFormattedValue rank:(int)aRank;

@property (readonly, copy, nonatomic) NSString * playerID;
@property (readonly, copy, nonatomic) NSString * leaderboardID;
@property (readonly, copy, nonatomic) NSDate * date;
@property (readonly, nonatomic) double value;
@property (readonly, copy, nonatomic) NSString * formattedValue;
@property (readonly, nonatomic) int rank;

@end






/******************************************
 * StandardGameKitScore class
 *
 *      Default score class.
 *      Just use this if you don't need
 *      anything new.
 ******************************************/

@interface StandardGameKitScore : NSObject<GameKitScore>
{
    NSString *playerID;
    NSString *leaderboardID;
    NSDate *date;
    double value;
    NSString *formattedValue;
    int rank;
}

@end